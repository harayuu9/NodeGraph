using System;
using System.Text;

namespace NodeGraph.Generator;


public class CSharpCodeGenerator
{
    private readonly StringBuilder _builder = new();
    private int _indent = 0;

    public CSharpCodeGenerator(string? nameSpace)
    {
        _builder.AppendLine($"""
                              // <auto-generated>
                              // THIS (.cs) FILE IS GENERATED BY DATASHEET. DO NOT CHANGE IT.
                              // </auto-generated>
                              #pragma warning disable CS8600
                              #pragma warning disable CS8601
                              #pragma warning disable CS8602
                              #pragma warning disable CS8603
                              #pragma warning disable CS8604
                              #pragma warning disable CS0162
                              #pragma warning disable CS8625
                              """);
        
        if (!string.IsNullOrEmpty(nameSpace))
        {
            WriteLine($"namespace {nameSpace}");
            WriteLine("{");
            _indent++;
        }
    }

    public IDisposable Enum(string name)
    {
        WriteLine($"public enum {name}");
        return Scope();
    }

    public IDisposable Class(string name)
    {
        WriteLine($"public class {name}");
        return Scope();
    }

    public IDisposable Scope(bool isFinishSemicolon = false)
    {
        WriteLine("{");
        _indent++;
        return Disposable.Create(() =>
        {
            _indent--;
            WriteLine(isFinishSemicolon ? "};" : "}");
        });
    }
    
    public void WriteLine(string? text = null)
    {
        if (string.IsNullOrEmpty(text))
        {
            _builder.AppendLine();
            return;
        }
        for (var i = 0; i < _indent; i++)
        {
            _builder.Append("    ");
        }

        _builder.AppendLine(text);
    }

    public string GetResult()
    {
        while (_indent > 0)
        {
            _indent--;
            WriteLine("}");
        }
        
        return _builder.ToString();
    }

    private class Disposable : IDisposable
    {
        public static IDisposable Create(Action action) => new Disposable(action);

        private Disposable(Action action) => _action = action; 

        private readonly Action _action;

        public void Dispose() => _action();
    }
}
